"use strict";var ganttChart=function(t){function e(t){var e=Z.call(t);return e!==P&&e!==O&&E("Expected object or array. Got: "+e),e===P?j.items=j.items.concat(t):j.items.push(t),m(),L}function n(t){return arguments.length?(d3.select(window).on("resize",t!==!1?b:null),j.isAutoResize=t,L):j.isAutoResize}function a(){var t=j.lanes.length,e=o(),n=c();G=d3.select(j.renderTo).append("svg").attr("width",j.width).attr("height",j.height).attr("class","gantt-chart"),G.append("defs").append("clipPath").attr("id","clip").append("rect").attr("width",e).attr("height",n),z=G.append("g").attr("transform","translate("+j.margin.left+","+j.margin.top+")").attr("width",e).attr("height",n).attr("class","main"),A=z.append("g").attr("clip-path","url(#clip)"),I=d3.select("body").append("div").attr("class","gantt-tooltip").style("opacity",0),N=d3.time.scale().domain(u()).range([0,e]),R=d3.scale.linear().domain([0,t]).range([0,n]),k=d3.svg.axis().scale(N).orient("bottom").ticks(5),Y=d3.svg.axis().scale(R).orient("left").ticks(t).tickFormat(""),X=d3.behavior.zoom().x(N),z.append("g").attr("transform","translate(0,"+n+")").attr("class","main axis date").call(k),z.append("g").attr("class","main axis lane").call(Y),z.append("g").attr("class","laneLabels"),G.call(X),d3.select("html").on("click",function(t){j.isEnableTooltip&&(event.target.closest("svg rect")||h())})}function r(t,e){var n;for(n in e)t.hasOwnProperty(n)&&(Z.call(e[n])===O?r(t[n],e[n]):t[n]=e[n])}function i(t){return arguments.length?(j.isEnableTooltip=t,f(),L):j.isEnableTooltip}function l(t){return arguments.length?(X.on("zoom",t?f:null),j.isEnableZoom=t,L):j.isEnableZoom}function s(){return d3.max(j.items,function(t){return t.lane})+1||0}function o(){return j.width-j.margin.right-j.margin.left}function c(){return j.height-j.margin.top-j.margin.bottom}function u(){return[d3.min(j.items,function(t){return t.start}),d3.max(j.items,function(t){return t.end})]}function h(){I.transition().duration(500).style("opacity",0).style("display","none")}function d(t){var e=Z.call(t);return arguments.length?(e!==P&&E("Expected array. Got: "+e),j.items=t,m(),L):j.items}function g(t){var e=Z.call(t);return arguments.length?(e!==P&&E("Expected array. Got: "+e),j.lanes=t,j.lanes.length=s()||j.lanes.length,w(!j.isShowLaneLabel),w(!j.isShowLaneLabel),L):j.lanes}function p(t){var e=" margin value is incorrect. All values should be numbers";return arguments.length?(void 0!==t.top&&(isNaN(t.top)&&E("'Top'"+e),j.margin.top=parseInt(t.top),z.attr("transform","translate("+j.margin.left+","+j.margin.top+")")),void 0!==t.right&&(isNaN(t.right)&&E("'Right'"+e),j.margin.right=parseInt(t.right)),void 0!==t.bottom&&(isNaN(t.bottom)&&E("'Bottom'"+e),j.margin.bottom=parseInt(t.bottom)),void 0!==t.left&&(isNaN(t.left)&&E("'Left'"+e),j.margin.left=parseInt(t.left),z.attr("transform","translate("+j.margin.left+","+j.margin.top+")")),b(),L):j.margin}function m(){var t=s();j.lanes.length=t,N.domain(u()),Y.ticks(t),R.domain([0,t]),X.x(N),f()}function f(){var t,e=c()/(j.lanes.length||1)/(j.sublanes||1);t=A.selectAll("rect").data(j.items,function(t){return t.id}).attr("x",function(t){return N(t.start)}).attr("y",function(t){return j.sublanes<2?R(t.lane):R(t.lane)+t.sublane*e}).attr("width",function(t){return N(t.end)-N(t.start)}).attr("height",function(t){return e}).on("click",j.isEnableTooltip?x:null),t.enter().append("rect").attr("class",function(t){return t["class"]+" main"}).attr("x",function(t){return N(t.start)}).attr("y",function(t){return j.sublanes<2?R(t.lane):R(t.lane)+t.sublane*e}).attr("width",function(t){return N(t.end)-N(t.start)}).attr("height",function(t){return e}).attr("opacity",.75).on("click",j.isEnableTooltip?x:null),t.exit().remove(),z.select("g.main.axis.date").call(k),z.select("g.main.axis.lane").call(Y),h()}function b(){j.isAutoResize&&(j.width=parseInt(d3.select(j.renderTo).style("width")),j.height=parseInt(d3.select(j.renderTo).style("height")));var t=o(),e=c();N.range([0,t]),R.range([0,e]),G.attr("width",j.width),G.attr("height",j.height),G.select("defs").select("clipPath").select("rect").attr("width",t),G.select("defs").select("clipPath").select("rect").attr("height",t),z.attr("width",t),z.attr("height",e),z.select("g.main.axis.date").attr("transform","translate(0,"+c()+")"),z.select("g.laneLabels").selectAll(".laneText").data(j.lanes).attr("y",function(t,e){return R(e+.5)}),X.x(N),y(j.isShowYGrid),v(j.isShowYGrid),f()}function w(t){return arguments.length?(j.isShowLaneLabel=t,t===!1?z.selectAll(".laneText").remove():z.select("g.laneLabels").selectAll(".laneText").data(j.lanes).enter().append("text").text(function(t){return t}).attr("x",-j.margin.right).attr("y",function(t,e){return R(e+.5)}).attr("dy",".5ex").attr("text-anchor","start").attr("class","laneText"),L):j.isShowLaneLabel}function x(t){I.style("display","block").transition().duration(200).style("opacity",.9),I.html("function"==typeof t.tooltip?t.tooltip():t.tooltip).style("left",d3.event.pageX+"px").style("top",d3.event.pageY+"px")}function y(t){if(!arguments.length)return j.isShowXGrid;var e=t!==!1?-c():-6;return k.tickSize(e,0,0),j.isShowXGrid=t,z.select("g.main.axis.date").call(k),L}function v(t){if(!arguments.length)return j.isShowYGrid;var e=t!==!1?-o():-6;return Y.tickSize(e,0,0),j.isShowYGrid=t,z.select("g.main.axis.lane").call(Y),L}function T(t,e){return arguments.length?(j.width=parseInt(t)||j.width,j.height=parseInt(e)||j.height,n(!1),b(),L):[j.width,j.height]}function S(t){return arguments.length?(j.sublanes=t,f(),L):j.sublanes}function E(t){throw TypeError(t)}var L,G,z,A,I,k,N,Y,R,X,j={},Z=Object.prototype.toString,P="[object Array]",O="[object Object]";return L={addItems:e,autoresize:n,enableTooltip:i,enableZoom:l,chart:function(){return z},items:d,lanes:g,margin:p,showLaneLabel:w,showXGrid:y,showYGrid:v,size:T,sublanes:S,svg:function(){return G},redraw:f,renderTo:function(){return j.renderTo},resize:b,xAxis:function(){return k},xScale:function(){return N},yScale:function(){return R},yAxis:function(){return Y},zoom:function(){return X}},j.items=null,j.lanes=null,j.renderTo="#gantt_chart",j.sublanes=1,j.isAutoResize=!0,j.isEnableTooltip=!0,j.isEnableZoom=!0,j.isShowXGrid=!0,j.isShowYGrid=!0,j.isShowLaneLabel=!0,j.height=null,j.width=null,j.margin={top:20,right:15,bottom:20,left:20},function(){r(j,t),j.items=j.items||[],j.lanes=j.lanes||[],j.lanes.length=s(),null===j.height&&(j.height=parseInt(d3.select(j.renderTo).style("height"))||480),null===j.width&&(j.width=parseInt(d3.select(j.renderTo).style("width"))||640),a(),l(j.isEnableZoom),n(j.isAutoResize),i(j.isEnableTooltip),w(j.isEnableTooltip),y(j.isShowXGrid),v(j.isShowYGrid),f()}(),L};
//# sourceMappingURL=data:application/json;base64,
