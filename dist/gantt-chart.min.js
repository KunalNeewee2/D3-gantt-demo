"use strict";var ganttChart=function(t){function e(t){var e=M.call(t);return e!==_&&e!==q&&A("Expected object or array. Got: "+e),e===_?C.items=C.items.concat(t):C.items.push(t),y(),D}function n(t){return arguments.length?(d3.select(window).on("resize",t!==!1?z:null),C.isAutoResize=t,D):C.isAutoResize}function a(){var t=C.lanes.length,e=p(),n=m();k=d3.select(C.renderTo).append("svg").attr("width",C.width).attr("height",C.height).attr("class","gantt-chart"),k.append("defs").append("clipPath").attr("id","clip").append("rect").attr("width",e).attr("height",n),F=d3.behavior.drag().on("dragstart",l).on("drag",i).on("dragend",s),N=k.append("g").attr("transform","translate("+C.margin.left+","+C.margin.top+")").attr("width",e).attr("height",n).attr("class","main"),Y=N.append("g").attr("clip-path","url(#clip)"),P=d3.select("body").append("div").attr("class","gantt-tooltip").style("opacity",0),j=d3.time.scale().domain(f()).range([0,e]),O=d3.scale.linear().domain([0,t]).range([0,n]),X=d3.svg.axis().scale(j).orient("bottom").ticks(5),Z=d3.svg.axis().scale(O).orient("left").ticks(t).tickFormat(""),B=d3.behavior.zoom().x(j),N.append("g").attr("transform","translate(0,"+n+")").attr("class","main axis date").call(X),N.append("g").attr("class","main axis lane").call(Z),N.append("g").attr("class","laneLabels"),k.call(B),d3.select("html").on("click",function(t){C.isEnableTooltip&&(event.target.closest("svg rect")||b())})}function r(t){var e=parseFloat(d3.select(this).attr("x")),n=parseFloat(d3.select(this).attr("width")),a=e+n;e+H>=d3.event.x||a<=d3.event.x?d3.select(this).attr("class",t["class"]+(C.isEnableItemResize?" cursor-resize":" cursor-default")):d3.select(this).attr("class",t["class"]+(C.isEnableDrag?" cursor-move":" cursor-default"))}function i(){var t=parseFloat(d3.select(this).attr("x")),e=parseFloat(d3.select(this).attr("y")),n=parseFloat(d3.select(this).attr("width")),a=t+n;if(C.isEnableItemResize){if(t+H>=d3.event.x&&a-H>=t)return void d3.select(this).attr("x",t+d3.event.dx).attr("width",n-d3.event.dx);if(a-H<=d3.event.x&&a>=t+5)return void d3.select(this).attr("width",n+d3.event.dx)}C.isEnableDrag&&d3.select(this).attr("x",t+d3.event.dx).attr("y",e+d3.event.dy)}function s(t){if(C.isEnableDrag||C.isEnableItemResize){var e=d3.select(this),n=Math.round(O.invert(e.attr("y"))),a=e.attr("x");n>=C.lanes.length&&(n=C.lanes.length-1),0>n&&(n=0),e.attr("y",O(n)),t.lane=n,t.start=Date.parse(j.invert(a)),t.end=Date.parse(j.invert(parseFloat(e.attr("width"))+parseFloat(a)))}}function l(){(C.isEnableDrag||C.isEnableItemResize)&&d3.event.sourceEvent.stopPropagation()}function o(t,e){var n;for(n in e)t.hasOwnProperty(n)&&(M.call(e[n])===q?o(t[n],e[n]):t[n]=e[n])}function c(t){return arguments.length?(C.isEnableDrag=t,E(),D):C.isEnableDrag}function d(t){return arguments.length?(C.isEnableItemResize=t,E(),D):C.isEnableItemResize}function h(t){return arguments.length?(C.isEnableTooltip=t,E(),D):C.isEnableTooltip}function u(t){return arguments.length?(B.on("zoom",t?E:null),C.isEnableZoom=t,D):C.isEnableZoom}function g(){return d3.max(C.items,function(t){return t.lane})+1||0}function p(){return C.width-C.margin.right-C.margin.left}function m(){return C.height-C.margin.top-C.margin.bottom}function f(){return[d3.min(C.items,function(t){return t.start}),d3.max(C.items,function(t){return t.end})]}function b(){P.transition().duration(500).style("opacity",0).style("display","none")}function v(t){var e=M.call(t);return arguments.length?(e!==_&&A("Expected array. Got: "+e),C.items=t,y(),D):C.items}function w(t){var e=M.call(t);return arguments.length?(e!==_&&A("Expected array. Got: "+e),C.lanes=t,C.lanes.length=g()||C.lanes.length,T(!C.isShowLaneLabel),T(!C.isShowLaneLabel),D):C.lanes}function x(t){var e=" margin value is incorrect. All values should be numbers";return arguments.length?(void 0!==t.top&&(isNaN(t.top)&&A("'Top'"+e),C.margin.top=parseInt(t.top),N.attr("transform","translate("+C.margin.left+","+C.margin.top+")")),void 0!==t.right&&(isNaN(t.right)&&A("'Right'"+e),C.margin.right=parseInt(t.right)),void 0!==t.bottom&&(isNaN(t.bottom)&&A("'Bottom'"+e),C.margin.bottom=parseInt(t.bottom)),void 0!==t.left&&(isNaN(t.left)&&A("'Left'"+e),C.margin.left=parseInt(t.left),N.attr("transform","translate("+C.margin.left+","+C.margin.top+")")),z(),D):C.margin}function y(){var t=g();C.lanes.length=t,j.domain(f()),Z.ticks(t),O.domain([0,t]),B.x(j),E(),E()}function E(){var t,e=m()/(C.lanes.length||1)/(C.sublanes||1);t=Y.selectAll("rect").data(C.items).attr("x",function(t){return j(t.start)}).attr("y",function(t){return C.sublanes<2?O(t.lane):O(t.lane)+t.sublane*e}).attr("width",function(t){return j(t.end)-j(t.start)}).attr("height",e).attr("class",function(t){return t["class"]+" main"}).attr("opacity",.75).call(F).on("click",C.isEnableTooltip?S:null).on("mousemove",r),t.enter().append("rect"),t.exit().remove(),N.select("g.main.axis.date").call(X),N.select("g.main.axis.lane").call(Z),b()}function z(){C.isAutoResize&&(C.width=parseInt(d3.select(C.renderTo).style("width")),C.height=parseInt(d3.select(C.renderTo).style("height")));var t=p(),e=m();j.range([0,t]),O.range([0,e]),k.attr("width",C.width),k.attr("height",C.height),k.select("defs").select("clipPath").select("rect").attr("width",t),k.select("defs").select("clipPath").select("rect").attr("height",t),N.attr("width",t),N.attr("height",e),N.select("g.main.axis.date").attr("transform","translate(0,"+m()+")"),N.select("g.laneLabels").selectAll(".laneText").data(C.lanes).attr("y",function(t,e){return O(e+.5)}),B.x(j),I(C.isShowYGrid),L(C.isShowYGrid),E()}function T(t){return arguments.length?(C.isShowLaneLabel=t,t===!1?N.selectAll(".laneText").remove():N.select("g.laneLabels").selectAll(".laneText").data(C.lanes).enter().append("text").text(function(t){return t}).attr("x",-C.margin.right).attr("y",function(t,e){return O(e+.5)}).attr("dy",".5ex").attr("text-anchor","start").attr("class","laneText"),D):C.isShowLaneLabel}function S(t){d3.event.defaultPrevented||(P.style("display","block").transition().duration(200).style("opacity",.9),P.html("function"==typeof t.tooltip?t.tooltip():t.tooltip).style("left",d3.event.pageX+"px").style("top",d3.event.pageY+"px"))}function I(t){if(!arguments.length)return C.isShowXGrid;var e=t!==!1?-m():-6;return X.tickSize(e,0,0),C.isShowXGrid=t,N.select("g.main.axis.date").call(X),D}function L(t){if(!arguments.length)return C.isShowYGrid;var e=t!==!1?-p():-6;return Z.tickSize(e,0,0),C.isShowYGrid=t,N.select("g.main.axis.lane").call(Z),D}function G(t,e){return arguments.length?(C.width=parseInt(t)||C.width,C.height=parseInt(e)||C.height,n(!1),z(),D):[C.width,C.height]}function R(t){return arguments.length?(C.sublanes=t,E(),D):C.sublanes}function A(t){throw TypeError(t)}var D,k,F,N,Y,P,X,j,Z,O,B,C={},M=Object.prototype.toString,_="[object Array]",q="[object Object]",H=50;return D={addItems:e,autoresize:n,enableDrag:c,enableItemResize:d,enableTooltip:h,enableZoom:u,chart:function(){return N},drag:function(){return F},items:v,lanes:w,margin:x,showLaneLabel:T,showXGrid:I,showYGrid:L,size:G,sublanes:R,svg:function(){return k},redraw:E,renderTo:function(){return C.renderTo},resize:z,xAxis:function(){return X},xScale:function(){return j},yScale:function(){return O},yAxis:function(){return Z},zoom:function(){return B}},C.items=null,C.lanes=null,C.renderTo="#gantt_chart",C.sublanes=1,C.isAutoResize=!0,C.isEnableDrag=!0,C.isEnableItemResize=!0,C.isEnableTooltip=!0,C.isEnableZoom=!0,C.isShowXGrid=!0,C.isShowYGrid=!0,C.isShowLaneLabel=!0,C.height=null,C.width=null,C.margin={top:20,right:15,bottom:20,left:20},function(){o(C,t),C.items=C.items||[],C.lanes=C.lanes||[],C.lanes.length=g(),null===C.height&&(C.height=parseInt(d3.select(C.renderTo).style("height"))||480),null===C.width&&(C.width=parseInt(d3.select(C.renderTo).style("width"))||640),a(),n(C.isAutoResize),c(C.isEnableDrag),h(C.isEnableTooltip),u(C.isEnableZoom),T(C.isEnableTooltip),I(C.isShowXGrid),L(C.isShowYGrid),E()}(),D};
//# sourceMappingURL=data:application/json;base64,
